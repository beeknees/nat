{
  "generator-nerdery": {
    "title": "NAT",
    "name": "nat",
    "description": "Example project for Client.",
    "version": "1.0.0",
    "markup": "MarkupIncludes",
    "styles": "StylesSass",
    "scripts": "ScriptsRequireJs",
    "framework": "FrameworkVanilla",
    "frameworkVanillaFeatures": {
      "demo": true,
      "functionBind": true,
      "jQuery": true,
      "modernizr": true
    },
    "scriptsVanillaNamespace": "NRD",
    "nerderyBower": {
      "dependencies": {
        "nerdery-reset-css": "./tools/cache/nerdery-reset-css",
        "requirejs": "2.1.9",
        "jquery": "components/jquery#1.11.0",
        "modernizr": "components/modernizr#2.6.2",
        "nerdery-function-bind": "./tools/cache/nerdery-function-bind"
      }
    },
    "nerderyCssLint": {},
    "nerderyGrunt": {
      "buildTask": [
        "markup",
        "styles",
        "scripts"
      ],
      "copyConfig": [
        "scripts: {\n    files: [{\n        expand: true,\n        cwd: '<%= env.DIR_SRC %>',\n        dest: '<%= env.DIR_DEST %>',\n        /*jshint -W014 */\n        src: (grunt.option('maps') || grunt.option('no-dev'))\n           ? ['assets/scripts/config.js', 'assets/vendor/requirejs/require.js']\n           : ['assets/scripts/**/*.js', 'assets/vendor/**/*.js']\n        /*jshint +W014 */\n    }]\n}"
      ],
      "docsTask": [],
      "initConfig": [
        "\n// -- Markup Tasks -----------------------------------------------------\n\nincludes: {\n    all: {\n        cwd: '<%= env.DIR_SRC %>',\n        src: [\n            '**/*.html',\n            '!templates/**',\n            '!assets/vendor/**'\n        ],\n        dest: '<%= env.DIR_TMP %>',\n        options: {\n        }\n    }\n},\n\nprettify: {\n    options: {\n        indent: 4,\n        wrap_line_length: 999999,\n        indent_inner_html: false, // jshint ignore:line\n        unformatted: [\n            'a', 'b', 'code', 'i', 'p',\n            'pre', 'small', 'span',\n            'sub', 'sup', 'u', 'textarea'\n        ]\n    },\n    all: {\n        files: [{\n            expand: true,\n            cwd: '<%= env.DIR_TMP %>',\n            dest: '<%= env.DIR_DEST %>',\n            src: ['**/*.html']\n        }]\n    }\n}",
        "\n// -- Style Tasks ------------------------------------------------------\n\nsass: {\n    all: {\n        files: [{\n            expand: true,\n            cwd: '<%= env.DIR_SRC %>/assets/scss',\n            src: ['*.scss'],\n            dest: '<%= env.DIR_DEST %>/assets/styles',\n            ext: '.css'\n        }],\n        options: {\n            outputStyle: (grunt.option('prod') ? 'compressed' : 'nested')\n        }\n    }\n}",
        "\n// -- Script Tasks -----------------------------------------------------\n\n// Bower plugin to automatically wire up bower modules into the\n// RequireJS config file.\nbower: {\n    main: {\n        // Path of shared configuration file\n        rjsConfig: '<%= env.DIR_SRC %>/assets/scripts/config.js'\n    }\n},\n\n// RequireJS plugin that will use uglify2 to build and minify our\n// JavaScript, templates and any other data we include in the require\n// files.\nrequirejs: {\n    options: {\n        // Path of source scripts, relative to this build file\n        baseUrl: '<%= env.DIR_SRC %>/assets/scripts',\n\n        // Whether to generate source maps for easier debugging of\n        // concatenated and minified code in the browser.\n        generateSourceMaps: grunt.option('maps'),\n\n        // Whether to preserve comments with a license. Not needed\n        // when, and incompatible with, generating a source map.\n        preserveLicenseComments: grunt.option('no-maps'),\n\n        // Allow `'use strict';` be included in the RequireJS files.\n        useStrict: true,\n\n        // Comments that start with //>> are build pragmas. Exmaple:\n        //\n        //     //>>includeStart(\"isDev\", pragmas.isDev);\n        //     ... debugging code here ...\n        //     //>>includeEnd(\"isDev\");\n        //\n        pragmas: {\n            isProd: grunt.option('prod'),\n            isStage: grunt.option('stage'),\n            isDev: grunt.option('dev')\n        },\n\n        // 'none' if you do not want to uglify\n        optimize: (grunt.option('maps') || grunt.option('no-dev')) ? 'uglify2' : 'none',\n\n        // Minification options\n        uglify2: {\n            output: {\n                beautify: false,\n                comments: false\n            },\n            compress: {\n                sequences: false,\n                global_defs: { // jshint ignore:line\n                    DEBUG: false\n                }\n            },\n            warnings: false,\n            mangle: true\n        }\n    },\n    main: {\n        options: {\n            // Path of shared configuration file\n            mainConfigFile: '<%= env.DIR_SRC %>/assets/scripts/config.js',\n\n            // Name of input script (.js extension inferred)\n            name: 'main',\n\n            // Path of final build script output\n            out: '<%= env.DIR_DEST %>/assets/scripts/main.js'\n        }\n    }\n}"
      ],
      "installTask": [
        "bower"
      ],
      "lintTask": [],
      "registerTask": [
        "grunt.registerTask('markup', ['includes', 'prettify','usebanner:markup']);",
        "grunt.registerTask('styles', ['sass', 'usebanner:styles']);",
        "if (grunt.option('no-maps') || grunt.option('dev')) {\n    grunt.registerTask('scripts', ['copy:scripts', 'usebanner:scripts']);\n} else {\n    grunt.registerTask('scripts', ['requirejs:main', 'copy:scripts', 'usebanner:scripts']);\n}"
      ],
      "bannerConfig": [
        "markup: {\n    options: {\n        banner: '<!--<%= banner %>-->\\n'\n    },\n    files: {\n        src: [ '<%= env.DIR_DEST %>/**/*.html' ]\n    }\n}",
        "styles: {\n    options: {\n        banner: '/*!<%= banner %> */\\n'\n    },\n    files: {\n        src: [ '<%= env.DIR_DEST %>/assets/styles/**/*.css' ]\n    }\n}",
        "scripts: {\n    options: {\n        banner: '/*!<%= banner %> */\\n'\n    },\n    files: {\n        src: [ '<%= env.DIR_DEST %>/assets/scripts/**/*.js' ]\n    }\n}"
      ],
      "watchConfig": [
        "markup: {\n    files: ['<%= env.DIR_SRC %>/**/*.html'],\n    tasks: ['markup']\n}",
        "styles: {\n    files: ['<%= env.DIR_SRC %>/assets/scss/**/*.scss'],\n    tasks: ['styles']\n}",
        "scripts: {\n    files: ['<%= env.DIR_SRC %>/assets/{scripts,vendor}/**/*.js'],\n    tasks: ['scripts']\n}"
      ]
    },
    "nerderyJsHint": {
      "globals": {
        "requirejs": true,
        "require": true,
        "define": true
      }
    },
    "nerderyPackage": {
      "devDependencies": {
        "grunt-includes": "0.4.4",
        "grunt-prettify": "0.3.4",
        "grunt-bower-install": "1.0.0",
        "grunt-sass": "0.12.1",
        "grunt-bower-requirejs": "0.7.1",
        "grunt-contrib-requirejs": "0.4.1",
        "karma-requirejs": "0.2.1"
      }
    },
    "markupIncludesFeatures": {},
    "markupContent": [
      "<div class=\"js-demo\">\n    <div class=\"js-demo-card demo-card\">\n        <div class=\"demo-card-front\">\n            <div>Awww.</div>The JavaScript boilerplate has not been initialized :-(\n        </div>\n        <div class=\"demo-card-back\">\n            <div>Success!</div>The JavaScript boilerplate has been initialized!\n        </div>\n    </div>\n</div>\n"
    ],
    "markupExtensionIn": "html",
    "markupExtensionOut": "html",
    "markupScripts": [
      "<script src=\"assets/vendor/requirejs/require.js\"></script>\n<script src=\"assets/scripts/config.js\"></script>\n<script>\n    /**\n     * Global constants\n     *\n     * TODO: ideally these values would be filled in from the server side\n     *\n     * @class SETTINGS\n     * @static\n     */\n    window.SETTINGS = {};\n\n    /**\n     * Indicates whether we are running on a production environment\n     *\n     * @property IS_PRODUCTION\n     * @type Boolean\n     * @final\n     */\n    SETTINGS.IS_PRODUCTION = false;\n\n    /**\n     * Appended to query string for versioning of network resources (CSS,\n     * JavaScript, etc). This version number should be updated in production\n     * for every release.\n     *\n     * @property APP_VERSION\n     * @type {String}\n     * @final\n     */\n    SETTINGS.APP_VERSION = '<%= yo.version %>';\n\n     /**\n     * Set to true to allow application to output to browser console, false\n     * to silence all console output. This should be set to `false` on\n     * production.\n     *\n     * @property LOG_CONSOLE\n     * @type Boolean\n     * @final\n     */\n    SETTINGS.LOG_CONSOLE = !SETTINGS.IS_PRODUCTION;\n\n    /**\n     * Appended to query string to defeat caching of network resources (CSS,\n     * JavaScript, etc). Should be set to '' on production\n     *\n     * @property CACHE_BUSTER\n     * @type String\n     * @final\n     */\n    SETTINGS.CACHE_BUSTER = SETTINGS.IS_PRODUCTION ? '' : '&bust=' + Math.random();\n\n    /**\n     * Root path for all JavaScript files\n     *\n     * @property SCRIPT_PATH\n     * @type String\n     * @final\n     */\n    SETTINGS.SCRIPT_PATH = 'assets/scripts/';\n\n    /**\n     * Set any RequireJs configuration that is dependent on dynamic\n     * configuration variables. Note that this config data is merged into\n     * any other require.config() statements defined elsewhere.\n     */\n    require.config({\n        // Script path\n        baseUrl: SETTINGS.SCRIPT_PATH,\n\n        // Params to append to the end of each js file request\n        urlArgs: 'v=' + SETTINGS.APP_VERSION + SETTINGS.CACHE_BUSTER\n    });\n\n    /**\n     * Set route and kick off RequireJs, which begins loading of scripts\n     * starting from main.js.\n     */\n    require(['main']);\n</script>\n"
    ],
    "markupScriptsEntryPoint": "src/templates/footer.html",
    "markupStyles": [
      "<link rel=\"stylesheet\" media=\"screen, projection\" href=\"assets/styles/modern.css\" />\n<link rel=\"stylesheet\" media=\"screen, projection\" href=\"assets/styles/legacy.css\" /><%\nif (yo.stylesSassFeatures.print) { %>\n<link rel=\"stylesheet\" media=\"print\" href=\"assets/styles/print.css\" /><%\n} %>\n"
    ],
    "markupStylesEntryPoint": "src/templates/header.html",
    "stylesSassFeatures": {},
    "stylesImported": [
      "modules/card.scss"
    ],
    "scriptsRequired": [
      {
        "from": "assets/scripts/utils/LogUtil.js",
        "resolved": "./utils/LogUtil"
      },
      {
        "from": "assets/scripts/views/DemoView.js",
        "resolved": "./views/DemoView"
      },
      {
        "as": "App",
        "from": "assets/scripts/App.js",
        "init": "window.app = new App();",
        "resolved": "./App"
      }
    ],
    "scriptsShimmed": [
      {
        "name": "jquery",
        "exports": "jQuery",
        "path": "jquery/jquery.js",
        "supportsAMD": true
      },
      {
        "name": "modernizr",
        "exports": "Modernizr",
        "path": "modernizr/modernizr.js",
        "supportsAMD": false
      },
      {
        "name": "nerdery-function-bind",
        "exports": "nerderyFunctionBind",
        "supportsAMD": true
      }
    ]
  }
}